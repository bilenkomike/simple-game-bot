import telebot
from telebot import types
import random

bot=telebot.TeleBot("1842712437:AAHGT9LW3IJF6BQFIj6nlzk8mI6tgnkWxgI")




@bot.message_handler(commands=['start'])
def welcome(message):
    sti = open('welcome.tgs','rb')
    bot.send_sticker(message.chat.id, sti)

    #keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º?!")
    item2 = types.KeyboardButton("–ö–∞–∫ –¥–µ–ª–∞?")
    markup.add(item1,item2)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {0.first_name}!\n –ú–æ–π –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –º–µ–Ω—è –∑–æ–≤—É—Ç - <b>{1.first_name}.\n –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç</b> —ç—Ç–æ–≥–æ —á–∞—Ç–∞!".format(message.from_user, bot.get_me()),
        parse_mode='html',reply_markup=markup)

@bot.message_handler(content_types=['text'])
def getMessage(message):
    if message.chat.type == 'private':
        if message.text == '–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º?!':
            markup = types.InlineKeyboardMarkup(row_width=3)
            item1 = types.InlineKeyboardButton('1', callback_data='1')
            item2 = types.InlineKeyboardButton('2', callback_data='2')
            item3 = types.InlineKeyboardButton('3', callback_data='3')
            item4 = types.InlineKeyboardButton('4', callback_data='4')
            item5 = types.InlineKeyboardButton('5', callback_data='5')
            item6 = types.InlineKeyboardButton('6', callback_data='6')
            item7 = types.InlineKeyboardButton('7', callback_data='7')
            item8 = types.InlineKeyboardButton('8', callback_data='8')
            item9 = types.InlineKeyboardButton('9', callback_data='9')
            item10 = types.InlineKeyboardButton('10', callback_data='10')

            markup.add(item1,item2,item3,item4,item5,item6,item7,item8,item9,item10)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ:', reply_markup=markup)
        elif message.text == '–ö–∞–∫ –¥–µ–ª–∞?':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')
            markup.add(item1, item2)

            bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –°–∞–º –∫–∞–∫?", reply_markup=markup)
        else:
            sti1 = open('none.tgs', 'rb')
            bot.send_sticker(message.chat.id, sti1)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            rand = str(random.randint(1, 11))


            if call.data == 'good':
                sti1 = open('sad.tgs', 'rb')
                bot.send_sticker(call.message.chat.id, sti1)
                bot.send_message(call.message.chat.id, "–¢–µ–±–µ –±–æ–ª—å—à–µ –ø–æ–≤–µ–∑–ª–æ! –£ –º–µ–Ω—è '–ë–∞–π–¥–µ–Ω' –ø–æ—Å—Ç –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ —É–≤–µ–ª \n –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–æ–≤ –≤ 2020!")
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–ú–æ–∂–µ—Ç –ø–æ–≥–∏—Ä–∞–µ–º?", reply_markup=None)
            elif call.data == 'bad':
                sti = open('happy.tgs', 'rb')
                bot.send_sticker(call.message.chat.id, sti)
                bot.send_message(call.message.chat.id, "–ù–µ —Ä–æ—Å—Ç—Ä–∞—é–π—Å—è! –Ø –≤ —Ç–æ–π –∂–µ —è–º–µ, –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –≤ 2020!")
                # remove
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ö–∞–∫ –¥–µ–ª–∞?", reply_markup=None)

                # show alert
                # bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ü–æ–∫–∞!")
            else:
                if call.data == rand:
                    sti1 = open('win.tgs', 'rb')
                    bot.send_sticker(call.message.chat.id, sti1)
                    bot.send_message(call.message.chat.id, "–ö—Ä—É—Ç–æ —Ç—ã —É–≥–æ–¥–∞–ª —á–∏—Å–ª–æ!\n –ò —Ç–µ–ø–µ—Ä—å –Ω–∞ –º–µ—Å—è—Ü —Ç—ã –ø–æ–ª—É—á–∏—à—å —Ñ–∏—Ä–º–µ–Ω–Ω–æ–µ –Ω–∏—á–µ–≥–æ!\n P.S. –ù–µ —Ä–æ—Å—Ç—Ä–∞—é–π—Å—è!üòÇ")
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text="–ú–æ–∂–µ—Ç –µ—â–µ –ø–æ–∏–≥—Ä–∞–µ–º?", reply_markup=None)
                else:
                    sti1 = open('devillose.tgs', 'rb')
                    bot.send_sticker(call.message.chat.id, sti1)
                    bot.send_message(call.message.chat.id,
                                     ' - "–ù—É –¥–∞–≤–∞–π –µ—â–µ, <b>{0.first_name}</b>! –ú–æ–∂–µ—Ç –≥–¥–µ-—Ç–æ, —Ç–∞–º –≤ –¥—Ä—É–≥–æ–π –≥–∞–ª–∞–∫—Ç–∏–∫–µ, —Ç—ã –≤—ã–∏–≥—Ä–∞–µ—à—å!\n –Ø –≤ —ç—Ç–æ –∏—Å–∫—Ä–µ–Ω–Ω–µ –≤–µ—Ä—é!" - üòÑ'.format(call.from_user, bot.get_me()), parse_mode='html',reply_markup=None)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text="–ú–æ–∂–µ—Ç –µ—â–µ –ø–æ–∏–≥—Ä–∞–µ–º?", reply_markup=None)



    except Exception as e:
        print(repr(e))



bot.polling(none_stop=True)